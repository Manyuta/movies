{"version":3,"sources":["components/Navbar.js","components/Searchbar.js","components/MovieList.js","config.js","components/MovieDetails.js","components/MovieItem.js","App.js","serviceWorker.js","index.js"],"names":["Navbar","react_default","a","createElement","className","href","SearchBar","state","term","onInputChange","event","target","value","_this","setState","props","onSearchTermChange","this","onChange","placeholder","Component","MovieList","movies","console","log","movieList","length","map","movie","key","id","NavLink","to","src","concat","poster_path","alt","title","config","API_KEY","MovieDetails","_ref","overview","popularity","release_date","vote_average","genres","genre","name","homepage","rel","MovieItem","_this2","match","params","movie_id","axios","get","then","res","data","components_MovieDetails","API_URL","App","movieSearch","results","slice","_this3","_","debounce","BrowserRouter","components_Navbar","Searchbar","Switch","Route","exact","path","render","components_MovieList","Object","assign","component","Boolean","window","location","hostname","ReactDOM","src_App","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"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","file":"static/js/main.0fa2835a.chunk.js","sourcesContent":["import React from \"react\";\r\n\r\nconst Navbar = () => {\r\n  return (\r\n    <nav className=\"nav-wrapper black darken-3\">\r\n      <div className=\"container\">\r\n        <a className=\"brand-logo\" href=\"/\">\r\n          <span className=\"text-logo\">MyFLEX</span>\r\n        </a>\r\n      </div>\r\n    </nav>\r\n  );\r\n};\r\n\r\nexport default Navbar;\r\n","import React, { Component } from \"react\";\r\n\r\nclass SearchBar extends Component {\r\n  state = { term: \"\" };\r\n\r\n  onInputChange = event => {\r\n    const term = event.target.value;\r\n    this.setState({\r\n      term\r\n    });\r\n    this.props.onSearchTermChange(term);\r\n  };\r\n  render() {\r\n    return (\r\n      <div className=\"search-bar\">\r\n        <input\r\n          value={this.state.term}\r\n          onChange={this.onInputChange}\r\n          placeholder=\"Search a movie\"\r\n        />\r\n      </div>\r\n    );\r\n  }\r\n}\r\n\r\nexport default SearchBar;\r\n","import React from \"react\";\r\nimport { NavLink } from \"react-router-dom\";\r\n\r\nconst MovieList = props => {\r\n  \r\n    //receive props from APP searchbar\r\n    const { movies } = props;\r\n    console.log(props);\r\n\r\n    const movieList = movies.length ? (\r\n      movies.map(movie => {\r\n        return (\r\n          <div className=\"card card-small\" key={movie.id} >\r\n            <NavLink to={\"/\" + movie.id}>\r\n              <div className=\"card-image waves-effect waves-block waves-light\">\r\n                <img\r\n                  className=\"activator\"\r\n                  src={`https://image.tmdb.org/t/p/w500/${movie.poster_path}`}\r\n                  alt={`poster ${movie.title}`}\r\n                />\r\n              </div>              \r\n            </NavLink>\r\n          </div>\r\n        );\r\n      })\r\n    ) : (\r\n      <div className=\"center\">Please reload the page</div>\r\n    );\r\n    return (\r\n      <div className=\"container home\">\r\n        <div>{movieList}</div>\r\n      </div>\r\n    );\r\n  }\r\n\r\n\r\nexport default MovieList;\r\n","const config = {\r\n    API_KEY: \"99d3cafad36a99ae7288e5cbb2854053\"\r\n}\r\n\r\nexport default config;\r\n\r\n","import React from \"react\";\r\n\r\nconst MovieDetails = ({ movie }) => {\r\n  return (\r\n    <div className=\"movie-item-text left-align col s12 m8\">\r\n      <h5>\r\n        <b>Overview</b>\r\n      </h5>\r\n      <p>{movie.overview}</p>\r\n\r\n      <p className=\"text-flow\">\r\n        <b>Popularity: </b>\r\n        {movie.popularity}\r\n      </p>\r\n      <p>\r\n        <b>Release date: </b>\r\n        {movie.release_date}\r\n      </p>\r\n      <p>\r\n        <b>Vote average: </b>\r\n        {movie.vote_average}\r\n      </p>\r\n      <p>\r\n        <b>Genres: </b>\r\n        {movie.genres.map(genre => `${genre.name} `)}\r\n      </p>\r\n      <p>\r\n        <a href={movie.homepage} rel=\"noopener noreferrer\" target=\"_blank\">\r\n          Go to movies' home page\r\n        </a>\r\n      </p>\r\n    </div>\r\n  );\r\n};\r\nexport default MovieDetails;\r\n","import React, { Component } from \"react\";\r\nimport axios from \"axios\";\r\nimport config from \"../config\";\r\nimport MovieDetails from \"./MovieDetails\";\r\n\r\nconst API_KEY = config.API_KEY;\r\nconst API_URL = `https://api.themoviedb.org`;\r\n\r\nclass MovieItem extends Component {\r\n  state = {\r\n    movie: null\r\n  };\r\n  componentDidMount() {\r\n    const id = this.props.match.params.movie_id;\r\n\r\n    axios\r\n      .get(`${API_URL}/3/movie/${id}?api_key=${API_KEY}&language=en-US`)\r\n      .then(res => {\r\n        this.setState({\r\n          movie: res.data\r\n        });\r\n      });\r\n  }\r\n  render() {\r\n    const movie = this.state.movie ? (\r\n      <div className=\"movie-item card-large\">\r\n        <div className=\"row\">\r\n          <div className=\"col s12\">\r\n            <h4 className=\"movie-item-title\">{this.state.movie.title}</h4>\r\n          </div>\r\n          <div className=\"col s12 m4\">\r\n            <a\r\n              href={this.state.movie.homepage}\r\n              rel=\"noopener noreferrer\"\r\n              target=\"_blank\"\r\n            >\r\n              <img\r\n                className=\"movie-item-poster\"\r\n                src={`https://image.tmdb.org/t/p/w500/${\r\n                  this.state.movie.poster_path\r\n                }`}\r\n                alt={`poster ${this.state.movie.poster_path}`}\r\n              />\r\n            </a>\r\n          </div>\r\n          <MovieDetails movie={this.state.movie} />\r\n        </div>\r\n      </div>\r\n    ) : (\r\n      <div className=\"center\">Loading movie...</div>\r\n    );\r\n    return <div className=\"container\">{movie}</div>;\r\n  }\r\n}\r\n\r\nexport default MovieItem;\r\n","import React, { Component } from \"react\";\nimport Navbar from \"./components/Navbar\";\nimport Searchbar from \"./components/Searchbar\";\nimport MovieList from \"./components/MovieList\";\nimport MovieItem from \"./components/MovieItem\";\nimport { BrowserRouter, Route, Switch } from \"react-router-dom\";\nimport axios from \"axios\";\nimport _ from \"lodash\";\nimport config from \"./config\";\n\nconst API_KEY = config.API_KEY;\nconst API_URL = `https://api.themoviedb.org`;\n\nclass App extends Component {\n  state = {\n    movies: []\n  };\n\n  componentDidMount() {\n    axios\n      .get(`${API_URL}/3/movie/popular?api_key=${API_KEY}&language=en-US`)\n      .then(res => {\n        this.setState({\n          movies: res.data.results.slice(0, 20)\n        });\n      });\n  }\n\n  movieSearch = term => {\n    axios\n      .get(\n        `${API_URL}/3/search/movie?query=${term}&api_key=${API_KEY}&language=en-US&page=1&include_adult=false`\n      )\n      .then(res => {\n        this.setState({\n          movies: res.data.results\n        });\n      });\n  };\n\n  render() {\n    const movieSearch = _.debounce(term => {\n      this.movieSearch(term);\n    }, 300);\n    return (\n      <BrowserRouter>\n        <div>\n          <Navbar />\n          <Searchbar onSearchTermChange={movieSearch} />\n          <Switch>\n            <Route\n              exact\n              path=\"/\"\n              render={props => (\n                <MovieList {...props} movies={this.state.movies} /> //pass state to props\n              )}\n            />\n            <Route path=\"/:movie_id\" component={MovieItem} />\n          </Switch>\n        </div>\n      </BrowserRouter>\n    );\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read http://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit http://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See http://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: http://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}